{"version":3,"file":"static/js/3276.b55ff6bb.chunk.js","mappings":"+LA4BA,IAxBA,WACE,OAAoCA,EAAAA,EAAAA,UAAS,MAAK,eAA3CC,EAAU,KAAEC,EAAa,KAE1BC,EAAI,yCAAG,WAAOC,GAAI,+EACR,QADQ,EACjBC,iBAAS,OAAT,EAAWC,UAAU,CAAD,eACiB,OAAxCC,QAAQC,KAAK,2BAA2B,mBACjC,GAAK,gCAKNH,UAAUC,UAAUG,UAAUL,GAAM,KAAD,EACrB,OAApBF,EAAcE,GAAM,mBACb,GAAI,QAGS,OAHT,0BAEXG,QAAQC,KAAK,cAAc,EAAD,IAC1BN,EAAc,MAAM,mBACb,GAAK,0DAEf,gBAhBS,sCAkBV,MAAO,CAAED,WAAAA,EAAYE,KAAAA,EACvB,C,uECtBe,SAASO,EAAe,GAAwC,IAAtCC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAY,EAAD,EAAEC,QAAAA,OAAO,MAAG,IAAG,EAClEC,GAAeC,EAAAA,EAAAA,UASrB,OAAOC,EAAAA,EAAAA,cACL,SAACC,GAPGH,IACFI,aAAaJ,EAAaK,SAC1BL,EAAaK,QAAU,MAOnBR,GAA0B,IAAjBM,EAAMG,SACjBN,EAAaK,QAAUE,YAAW,WAChCV,EAAMM,EACR,GAAGJ,IAEDI,EAAMG,OAAS,IAAM,GACvBR,EAAYK,EAEhB,GACA,CAACN,EAAOC,EAAaC,GAEzB,C,uRCDe,SAASS,IACtB,IAAQC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAEApB,GAASsB,EAAAA,EAAAA,KAATtB,KAER,GAA0BH,EAAAA,EAAAA,UAAS,kCAAiC,eAA7D0B,EAAK,KAAEC,EAAQ,KAEhBC,EAAW,qiBAQXC,EAAS,SAACzB,GACVA,IACFmB,EAAgB,WAChBpB,EAAKC,GAET,EAEM0B,GAAcpB,EAAAA,EAAAA,GAAe,CACjCE,YAAa,kBAAMiB,EAAOD,EAAY,IAOxC,OACE,iCACE,SAAC,KAAM,WACL,oFAGF,SAAC,IAAG,CACFG,GAAI,CACFC,GAAI,EACJC,GAAI,EACJC,QAAS,SAACC,GAAK,MAA6B,UAAvBA,EAAMC,QAAQC,KAAmB,WAAa,UAAU,GAC7E,UAEF,SAAC,IAAS,WACR,SAAC,IAAiB,CAChBC,QAAQ,oBACRC,MAAO,CACL,CAAEC,KAAM,aAAcC,KAAMC,EAAAA,GAAAA,YAC5B,CAAEF,KAAM,6BAMhB,SAAC,IAAS,CAACT,GAAI,CAAEY,GAAI,IAAK,UACxB,SAAC,IAAI,CAACZ,GAAI,CAAEa,EAAG,GAAI,UACjB,UAAC,IAAG,CACFC,QAAQ,OACRC,oBAAqB,CAAEC,GAAI,iBAAkBC,GAAI,kBACjDC,IAAK,EAAE,WAEP,UAAC,IAAK,CAACC,QAAS,EAAE,WAChB,SAAC,IAAU,CAACC,QAAQ,WAAWpB,GAAI,CAAEqB,MAAO,kBAAmB,wBAI/D,SAAC,IAAS,CACRC,WAAS,EACT3B,MAAOA,EACP4B,SA3CO,SAACrC,GACpBU,EAASV,EAAMsC,OAAO7B,MACxB,EA0Cc8B,WAAY,CACVC,cACE,SAAC,IAAc,CAACC,SAAS,MAAK,UAC5B,SAAC,IAAO,CAACC,MAAM,OAAM,UACnB,SAAC,IAAU,CAACC,QAAS,kBAAM/B,EAAOH,EAAM,EAAC,UACvC,SAAC,IAAO,CAACmC,KAAK,gBAAgBC,MAAO,kBASnD,UAAC,IAAK,CAACZ,QAAS,EAAE,WAChB,SAAC,IAAU,CAACC,QAAQ,WAAWpB,GAAI,CAAEqB,MAAO,kBAAmB,8BAI/D,SAAC,IAAU,CAACQ,QAAS9B,EAAY,SAAEF,gBAOjD,C","sources":["hooks/useCopyToClipboard.js","hooks/useDoubleClick.js","pages/components/extra/DemoCopyToClipboardPage.js"],"sourcesContent":["import { useState } from 'react';\n\n// ----------------------------------------------------------------------\n\nfunction useCopyToClipboard() {\n  const [copiedText, setCopiedText] = useState(null);\n\n  const copy = async (text) => {\n    if (!navigator?.clipboard) {\n      console.warn('Clipboard not supported');\n      return false;\n    }\n\n    // Try to save to clipboard then save it in the state if worked\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText(text);\n      return true;\n    } catch (error) {\n      console.warn('Copy failed', error);\n      setCopiedText(null);\n      return false;\n    }\n  };\n\n  return { copiedText, copy };\n}\n\nexport default useCopyToClipboard;\n","import { useCallback, useRef } from 'react';\n\n// ----------------------------------------------------------------------\n\nexport default function useDoubleClick({ click, doubleClick, timeout = 250 }) {\n  const clickTimeout = useRef();\n\n  const clearClickTimeout = () => {\n    if (clickTimeout) {\n      clearTimeout(clickTimeout.current);\n      clickTimeout.current = null;\n    }\n  };\n\n  return useCallback(\n    (event) => {\n      clearClickTimeout();\n      if (click && event.detail === 1) {\n        clickTimeout.current = setTimeout(() => {\n          click(event);\n        }, timeout);\n      }\n      if (event.detail % 2 === 0) {\n        doubleClick(event);\n      }\n    },\n    [click, doubleClick, timeout]\n  );\n}\n","import { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\n// @mui\nimport {\n  Box,\n  Card,\n  Stack,\n  Tooltip,\n  Container,\n  TextField,\n  IconButton,\n  Typography,\n  InputAdornment,\n} from '@mui/material';\n// hooks\nimport useCopyToClipboard from '../../../hooks/useCopyToClipboard';\n// routes\nimport { PATH_PAGE } from '../../../routes/paths';\n// hooks\nimport useDoubleClick from '../../../hooks/useDoubleClick';\n// components\nimport Iconify from '../../../components/iconify';\nimport { useSnackbar } from '../../../components/snackbar';\nimport CustomBreadcrumbs from '../../../components/custom-breadcrumbs';\n\n// ----------------------------------------------------------------------\n\nexport default function DemoCopyToClipboardPage() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { copy } = useCopyToClipboard();\n\n  const [value, setValue] = useState('https://www.npmjs.com/package/');\n\n  const textOnClick = `Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia\n  Curae; Sed aliquam, nisi quis porttitor congue, elit erat euismod orci, ac placerat\n  dolor lectus quis orci. Cras non dolor. Praesent egestas neque eu enim. Ut varius\n  tincidunt libero. Fusce fermentum odio nec arcu. Etiam rhoncus. Nulla sit amet est.\n  Donec posuere vulputate arcu. Vestibulum ullamcorper mauris at ligula. Praesent ut\n  ligula non mi varius sagittis. Pellentesque posuere. Praesent adipiscing. Sed\n  libero. Duis leo. Nulla porta dolor.`;\n\n  const onCopy = (text) => {\n    if (text) {\n      enqueueSnackbar('Copied!');\n      copy(text);\n    }\n  };\n\n  const handleClick = useDoubleClick({\n    doubleClick: () => onCopy(textOnClick),\n  });\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title> Extra Components: Copy To Clipboard | Minimal UI</title>\n      </Helmet>\n\n      <Box\n        sx={{\n          pt: 6,\n          pb: 1,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"Copy To Clipboard\"\n            links={[\n              { name: 'Components', href: PATH_PAGE.components },\n              { name: 'Copy To Clipboard' },\n            ]}\n          />\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Card sx={{ p: 5 }}>\n          <Box\n            display=\"grid\"\n            gridTemplateColumns={{ xs: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' }}\n            gap={5}\n          >\n            <Stack spacing={2}>\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\n                on Change\n              </Typography>\n\n              <TextField\n                fullWidth\n                value={value}\n                onChange={handleChange}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <Tooltip title=\"Copy\">\n                        <IconButton onClick={() => onCopy(value)}>\n                          <Iconify icon=\"eva:copy-fill\" width={24} />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Stack>\n\n            <Stack spacing={2}>\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\n                on Double Click\n              </Typography>\n\n              <Typography onClick={handleClick}>{textOnClick}</Typography>\n            </Stack>\n          </Box>\n        </Card>\n      </Container>\n    </>\n  );\n}\n"],"names":["useState","copiedText","setCopiedText","copy","text","navigator","clipboard","console","warn","writeText","useDoubleClick","click","doubleClick","timeout","clickTimeout","useRef","useCallback","event","clearTimeout","current","detail","setTimeout","DemoCopyToClipboardPage","enqueueSnackbar","useSnackbar","useCopyToClipboard","value","setValue","textOnClick","onCopy","handleClick","sx","pt","pb","bgcolor","theme","palette","mode","heading","links","name","href","PATH_PAGE","my","p","display","gridTemplateColumns","xs","md","gap","spacing","variant","color","fullWidth","onChange","target","InputProps","endAdornment","position","title","onClick","icon","width"],"sourceRoot":""}