{"version":3,"file":"static/js/1750.1b299df4.chunk.js","mappings":"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","sources":["sections/_examples/mui/Textfields.js","pages/components/mui/MUITextFieldPage.js","../node_modules/@mui/lab/Masonry/masonryClasses.js","../node_modules/@mui/lab/Masonry/Masonry.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\n// @mui\nimport { MenuItem, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { Masonry } from '@mui/lab';\n// components\nimport Iconify from '../../../components/iconify';\n//\nimport { Block } from '../Block';\n\n// ----------------------------------------------------------------------\n\nconst CURRENCIES = [\n  { value: 'USD', label: '$' },\n  { value: 'EUR', label: '€' },\n  { value: 'BTC', label: '฿' },\n  { value: 'JPY', label: '¥' },\n];\n\nconst style = {\n  '& > *': { my: '8px !important' },\n};\n\n// ----------------------------------------------------------------------\n\nTextfields.propTypes = {\n  variant: PropTypes.string,\n};\n\nexport default function Textfields({ variant }) {\n  const [currency, setCurrency] = useState('EUR');\n\n  const [values, setValues] = useState({\n    amount: '',\n    password: '',\n    weight: '',\n    weightRange: '',\n    showPassword: false,\n  });\n\n  const handleChangeCurrency = (event) => {\n    setCurrency(event.target.value);\n  };\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <Masonry columns={{ xs: 1, md: 2 }} spacing={3}>\n      <Block title=\"General\" sx={style}>\n        <TextField variant={variant} fullWidth label=\"Inactive\" />\n\n        <TextField\n          variant={variant}\n          required\n          fullWidth\n          label=\"Activated\"\n          defaultValue=\"Hello Minimal\"\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          type=\"password\"\n          label=\"Password\"\n          autoComplete=\"current-password\"\n        />\n\n        <TextField\n          variant={variant}\n          disabled\n          fullWidth\n          label=\"Disabled\"\n          defaultValue=\"Hello Minimal\"\n        />\n      </Block>\n\n      <Block title=\"With Icon & Adornments\" sx={style}>\n        <TextField\n          variant={variant}\n          fullWidth\n          label=\"Filled\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <Iconify icon=\"eva:person-fill\" width={24} />\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <TextField\n          variant={variant}\n          disabled\n          fullWidth\n          label=\"Disabled\"\n          defaultValue=\"Hello Minimal\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <Iconify icon=\"eva:person-fill\" width={24} />\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          label=\"With normal TextField\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\n          }}\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          value={values.weight}\n          onChange={handleChange('weight')}\n          helperText=\"Weight\"\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\n          }}\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          type={values.showPassword ? 'text' : 'password'}\n          value={values.password}\n          onChange={handleChange('password')}\n          label=\"Password\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <Iconify icon=\"eva:person-fill\" width={24} />\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {values.showPassword ? (\n                    <Iconify icon=\"eva:eye-fill\" width={24} />\n                  ) : (\n                    <Iconify icon=\"eva:eye-off-fill\" width={24} />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Block>\n\n      <Block title=\"With Caption\" sx={style}>\n        <TextField\n          variant={variant}\n          fullWidth\n          label=\"Error\"\n          defaultValue=\"Hello Minimal\"\n          helperText=\"Incorrect entry.\"\n        />\n\n        <TextField\n          variant={variant}\n          error\n          fullWidth\n          label=\"Error\"\n          defaultValue=\"Hello Minimal\"\n          helperText=\"Incorrect entry.\"\n        />\n      </Block>\n\n      <Block title=\"Type\" sx={style}>\n        <TextField\n          variant={variant}\n          fullWidth\n          type=\"password\"\n          label=\"Password\"\n          autoComplete=\"current-password\"\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          type=\"number\"\n          label=\"Number\"\n          defaultValue={0}\n          InputLabelProps={{ shrink: true }}\n        />\n\n        <TextField variant={variant} fullWidth label=\"Search\" type=\"search\" />\n      </Block>\n\n      <Block title=\"Size\" sx={style}>\n        <TextField variant={variant} fullWidth label=\"Size\" size=\"small\" defaultValue=\"Small\" />\n\n        <TextField variant={variant} fullWidth label=\"Size\" defaultValue=\"Normal\" />\n      </Block>\n\n      <Block title=\"Select\" sx={style}>\n        <TextField\n          variant={variant}\n          select\n          fullWidth\n          label=\"Select\"\n          value={currency}\n          onChange={handleChangeCurrency}\n          helperText=\"Please select your currency\"\n        >\n          {CURRENCIES.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n\n        <TextField\n          variant={variant}\n          select\n          fullWidth\n          size=\"small\"\n          value={currency}\n          label=\"Native select\"\n          SelectProps={{ native: true }}\n          onChange={handleChangeCurrency}\n          helperText=\"Please select your currency\"\n        >\n          {CURRENCIES.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </Block>\n\n      <Block title=\"Multiline\" sx={style}>\n        <TextField\n          variant={variant}\n          fullWidth\n          label=\"Multiline\"\n          multiline\n          maxRows={4}\n          value=\"Controlled\"\n        />\n\n        <TextField\n          variant={variant}\n          fullWidth\n          multiline\n          placeholder=\"Placeholder\"\n          label=\"Multiline Placeholder\"\n        />\n\n        <TextField\n          variant={variant}\n          rows={4}\n          fullWidth\n          multiline\n          label=\"Multiline\"\n          defaultValue=\"Default Value\"\n        />\n      </Block>\n    </Masonry>\n  );\n}\n","import { useState } from 'react';\n\nimport { Helmet } from 'react-helmet-async';\n// @mui\nimport { Box, Container, Tab, Tabs } from '@mui/material';\n// routes\nimport { PATH_PAGE } from '../../../routes/paths';\n// components\nimport CustomBreadcrumbs from '../../../components/custom-breadcrumbs';\n// sections\nimport Textfields from '../../../sections/_examples/mui/Textfields';\n\n// ----------------------------------------------------------------------\n\nconst TABS = [\n  { value: 'outlined', label: 'Outlined', component: <Textfields variant=\"outlined\" /> },\n  { value: 'filled', label: 'Filled', component: <Textfields variant=\"filled\" /> },\n  { value: 'standard', label: 'Standard', component: <Textfields variant=\"standard\" /> },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function MUITextFieldPage() {\n  const [currentTab, setCurrentTab] = useState('outlined');\n\n  return (\n    <>\n      <Helmet>\n        <title> MUI Components: Textfield | Minimal UI</title>\n      </Helmet>\n\n      <Box\n        sx={{\n          pt: 6,\n          pb: 1,\n          bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n        }}\n      >\n        <Container>\n          <CustomBreadcrumbs\n            heading=\"Textfield\"\n            links={[\n              {\n                name: 'Components',\n                href: PATH_PAGE.components,\n              },\n              { name: 'Textfield' },\n            ]}\n            moreLink={['https://mui.com/components/text-fields']}\n          />\n        </Container>\n      </Box>\n\n      <Container sx={{ my: 10 }}>\n        <Tabs value={currentTab} onChange={(event, newValue) => setCurrentTab(newValue)}>\n          {TABS.map((tab) => (\n            <Tab key={tab.value} value={tab.value} label={tab.label} />\n          ))}\n        </Tabs>\n\n        <form noValidate autoComplete=\"off\">\n          {TABS.map(\n            (tab) =>\n              tab.value === currentTab && (\n                <Box key={tab.value} sx={{ mt: 5 }}>\n                  {tab.component}\n                </Box>\n              )\n          )}\n        </form>\n      </Container>\n    </>\n  );\n}\n","import generateUtilityClass from '@mui/material/generateUtilityClass';\nimport generateUtilityClasses from '@mui/material/generateUtilityClasses';\nexport function getMasonryUtilityClass(slot) {\n  return generateUtilityClass('MuiMasonry', slot);\n}\nconst masonryClasses = generateUtilityClasses('MuiMasonry', ['root']);\nexport default masonryClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columns\", \"spacing\", \"defaultColumns\", \"defaultHeight\", \"defaultSpacing\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { flushSync } from 'react-dom';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from './masonryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const parseToNumber = val => {\n  return Number(val.replace('px', ''));\n};\nconst lineBreakStyle = {\n  flexBasis: '100%',\n  width: 0,\n  margin: 0,\n  padding: 0\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\nexport const getStyle = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'flex-start',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  const stylesSSR = {};\n  // Only applicable for Server-Side Rendering\n  if (ownerState.isSSR) {\n    const orderStyleSSR = {};\n    const defaultSpacing = parseToNumber(theme.spacing(ownerState.defaultSpacing));\n    for (let i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[`&:nth-of-type(${ownerState.defaultColumns}n+${i % ownerState.defaultColumns})`] = {\n        order: i\n      };\n    }\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = _extends({}, styles['& > *'], orderStyleSSR, {\n      margin: defaultSpacing / 2,\n      width: `calc(${(100 / ownerState.defaultColumns).toFixed(2)}% - ${defaultSpacing}px)`\n    });\n    return _extends({}, styles, stylesSSR);\n  }\n  const spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  const transformer = createUnarySpacing(theme);\n  const spacingStyleFromPropValue = propValue => {\n    let spacing;\n    // in case of string/number value\n    if (typeof propValue === 'string' && !Number.isNaN(Number(propValue)) || typeof propValue === 'number') {\n      const themeSpacingValue = Number(propValue);\n      spacing = getValue(transformer, themeSpacingValue);\n    } else {\n      spacing = propValue;\n    }\n    return _extends({\n      margin: `calc(0px - (${spacing} / 2))`,\n      '& > *': {\n        margin: `calc(${spacing} / 2)`\n      }\n    }, ownerState.maxColumnHeight && {\n      height: typeof spacing === 'number' ? Math.ceil(ownerState.maxColumnHeight + parseToNumber(spacing)) : `calc(${ownerState.maxColumnHeight}px + ${spacing})`\n    });\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, spacingValues, spacingStyleFromPropValue));\n  const columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n  const columnStyleFromPropValue = propValue => {\n    const columnValue = Number(propValue);\n    const width = `${(100 / columnValue).toFixed(2)}%`;\n    const spacing = typeof spacingValues === 'string' && !Number.isNaN(Number(spacingValues)) || typeof spacingValues === 'number' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: `calc(${width} - ${spacing})`\n      }\n    };\n  };\n  styles = deepmerge(styles, handleBreakpoints({\n    theme\n  }, columnValues, columnStyleFromPropValue));\n\n  // configure width for responsive spacing values\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, (propValue, breakpoint) => {\n      if (breakpoint) {\n        const themeSpacingValue = Number(propValue);\n        const lastBreakpoint = Object.keys(columnValues).pop();\n        const spacing = getValue(transformer, themeSpacingValue);\n        const column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        const width = `${(100 / column).toFixed(2)}%`;\n        return {\n          '& > *': {\n            width: `calc(${width} - ${spacing})`\n          }\n        };\n      }\n      return null;\n    }));\n  }\n  return styles;\n};\nconst MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(getStyle);\nconst Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n  const {\n      children,\n      className,\n      component = 'div',\n      columns = 4,\n      spacing = 1,\n      defaultColumns,\n      defaultHeight,\n      defaultSpacing\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const masonryRef = React.useRef();\n  const [maxColumnHeight, setMaxColumnHeight] = React.useState();\n  const isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n  const [numberOfLineBreaks, setNumberOfLineBreaks] = React.useState(isSSR ? defaultColumns - 1 : 0);\n  const ownerState = _extends({}, props, {\n    spacing,\n    columns,\n    maxColumnHeight,\n    defaultColumns,\n    defaultHeight,\n    defaultSpacing,\n    isSSR\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleResize = masonryChildren => {\n    if (!masonryRef.current || !masonryChildren || masonryChildren.length === 0) {\n      return;\n    }\n    const masonry = masonryRef.current;\n    const masonryFirstChild = masonryRef.current.firstChild;\n    const parentWidth = masonry.clientWidth;\n    const firstChildWidth = masonryFirstChild.clientWidth;\n    if (parentWidth === 0 || firstChildWidth === 0) {\n      return;\n    }\n    const firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    const firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    const firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    const currentNumberOfColumns = Math.round(parentWidth / (firstChildWidth + firstChildMarginLeft + firstChildMarginRight));\n    const columnHeights = new Array(currentNumberOfColumns).fill(0);\n    let skip = false;\n    masonry.childNodes.forEach(child => {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n      const childComputedStyle = window.getComputedStyle(child);\n      const childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      const childMarginBottom = parseToNumber(childComputedStyle.marginBottom);\n      // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n      const childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      }\n      // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n      for (let i = 0; i < child.childNodes.length; i += 1) {\n        const nestedChild = child.childNodes[i];\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n      if (!skip) {\n        // find the current shortest column (where the current item will be placed)\n        const currentMinColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));\n        columnHeights[currentMinColumnIndex] += childHeight;\n        const order = currentMinColumnIndex + 1;\n        child.style.order = order;\n      }\n    });\n    if (!skip) {\n      // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering\n      // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen\n      // Related issue - https://github.com/facebook/react/issues/24331\n      flushSync(() => {\n        setMaxColumnHeight(Math.max(...columnHeights));\n        setNumberOfLineBreaks(currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0);\n      });\n    }\n  };\n  const observer = React.useRef(typeof ResizeObserver === 'undefined' ? undefined : new ResizeObserver(handleResize));\n  React.useEffect(() => {\n    const resizeObserver = observer.current;\n    // IE and old browsers are not supported\n    if (resizeObserver === undefined) {\n      return undefined;\n    }\n    if (masonryRef.current) {\n      masonryRef.current.childNodes.forEach(childNode => {\n        resizeObserver.observe(childNode);\n      });\n    }\n    return () => resizeObserver ? resizeObserver.disconnect() : {};\n  }, [columns, spacing, children]);\n  const handleRef = useForkRef(ref, masonryRef);\n\n  //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n  const lineBreaks = new Array(numberOfLineBreaks).fill('').map((_, index) => /*#__PURE__*/_jsx(\"span\", {\n    \"data-class\": \"line-break\",\n    style: _extends({}, lineBreakStyle, {\n      order: index + 1\n    })\n  }, index));\n  return /*#__PURE__*/_jsxs(MasonryRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState\n  }, other, {\n    children: [children, lineBreaks]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes /* @typescript-to-proptypes-ignore */.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;"],"names":["CURRENCIES","value","label","style","my","Textfields","variant","useState","currency","setCurrency","amount","password","weight","weightRange","showPassword","values","setValues","handleChangeCurrency","event","target","handleChange","prop","Masonry","columns","xs","md","spacing","Block","title","sx","TextField","fullWidth","required","defaultValue","type","autoComplete","disabled","InputProps","startAdornment","InputAdornment","position","icon","width","onChange","helperText","endAdornment","IconButton","onClick","onMouseDown","preventDefault","edge","error","InputLabelProps","shrink","size","select","map","option","MenuItem","SelectProps","native","multiline","maxRows","placeholder","rows","TABS","component","MUITextFieldPage","currentTab","setCurrentTab","Box","pt","pb","bgcolor","theme","palette","mode","Container","heading","links","name","href","PATH_PAGE","moreLink","Tabs","newValue","tab","Tab","noValidate","mt","getMasonryUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","parseToNumber","val","Number","replace","lineBreakStyle","flexBasis","margin","padding","MasonryRoot","styled","overridesResolver","props","styles","root","ownerState","display","flexFlow","alignContent","boxSizing","stylesSSR","isSSR","orderStyleSSR","defaultSpacing","i","defaultColumns","order","height","defaultHeight","_extends","toFixed","spacingValues","resolveBreakpointValues","breakpoints","transformer","createUnarySpacing","deepmerge","handleBreakpoints","propValue","isNaN","themeSpacingValue","getValue","maxColumnHeight","Math","ceil","columnValues","columnValue","breakpoint","lastBreakpoint","Object","keys","pop","column","React","inProps","ref","useThemeProps","children","className","other","_objectWithoutPropertiesLoose","masonryRef","setMaxColumnHeight","undefined","numberOfLineBreaks","setNumberOfLineBreaks","classes","composeClasses","useUtilityClasses","observer","ResizeObserver","masonryChildren","current","length","masonry","masonryFirstChild","firstChild","parentWidth","clientWidth","firstChildWidth","firstChildComputedStyle","window","getComputedStyle","firstChildMarginLeft","marginLeft","firstChildMarginRight","marginRight","currentNumberOfColumns","round","columnHeights","Array","fill","skip","childNodes","forEach","child","nodeType","Node","ELEMENT_NODE","dataset","class","childComputedStyle","childMarginTop","marginTop","childMarginBottom","marginBottom","childHeight","nestedChild","tagName","clientHeight","currentMinColumnIndex","indexOf","min","flushSync","max","resizeObserver","childNode","observe","disconnect","handleRef","useForkRef","lineBreaks","_","index","_jsx","_jsxs","as","clsx"],"sourceRoot":""}