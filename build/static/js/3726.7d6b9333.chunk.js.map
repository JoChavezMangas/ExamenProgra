{"version":3,"file":"static/js/3726.7d6b9333.chunk.js","mappings":"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","sources":["pages/dashboard/PermissionDeniedPage.js","../node_modules/@mui/material/esm/ToggleButton/toggleButtonClasses.js","../node_modules/@mui/material/esm/ToggleButton/ToggleButton.js","../node_modules/@mui/material/esm/ToggleButtonGroup/isValueSelected.js","../node_modules/@mui/material/esm/ToggleButtonGroup/toggleButtonGroupClasses.js","../node_modules/@mui/material/esm/ToggleButtonGroup/ToggleButtonGroup.js"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport { useState } from 'react';\n// @mui\nimport {\n  Box,\n  Card,\n  Container,\n  Typography,\n  CardHeader,\n  ToggleButton,\n  ToggleButtonGroup,\n} from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\nimport { useSettingsContext } from '../../components/settings';\nimport CustomBreadcrumbs from '../../components/custom-breadcrumbs';\n// auth\nimport RoleBasedGuard from '../../auth/RoleBasedGuard';\n\n// ----------------------------------------------------------------------\n\nexport default function PermissionDeniedPage() {\n  const { themeStretch } = useSettingsContext();\n\n  const [role, setRole] = useState('admin');\n\n  const handleChangeRole = (event, newRole) => {\n    if (newRole !== null) {\n      setRole(newRole);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title> Other Cases: Permission Denied | Minimal UI</title>\n      </Helmet>\n\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"Permission Denied\"\n          links={[\n            {\n              name: 'Dashboard',\n              href: PATH_DASHBOARD.root,\n            },\n            {\n              name: 'Permission Denied',\n            },\n          ]}\n        />\n\n        <ToggleButtonGroup\n          exclusive\n          value={role}\n          onChange={handleChangeRole}\n          color=\"primary\"\n          sx={{ mb: 5 }}\n        >\n          <ToggleButton value=\"admin\" aria-label=\"admin role\">\n            isAdmin\n          </ToggleButton>\n\n          <ToggleButton value=\"user\" aria-label=\"user role\">\n            isUser\n          </ToggleButton>\n        </ToggleButtonGroup>\n\n        <RoleBasedGuard hasContent roles={[role]}>\n          <Box gap={3} display=\"grid\" gridTemplateColumns=\"repeat(2, 1fr)\">\n            {[...Array(8)].map((_, index) => (\n              <Card key={index}>\n                <CardHeader title={`Card ${index + 1}`} subheader=\"Proin viverra ligula\" />\n\n                <Typography sx={{ p: 3, color: 'text.secondary' }}>\n                  Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. In enim justo,\n                  rhoncus ut, imperdiet a, venenatis vitae, justo. Vestibulum fringilla pede sit\n                  amet augue.\n                </Typography>\n              </Card>\n            ))}\n          </Box>\n        </RoleBasedGuard>\n      </Container>\n    </>\n  );\n}\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButton', slot);\n}\nconst toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge']);\nexport default toggleButtonClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"];\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '../styles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport toggleButtonClasses, { getToggleButtonUtilityClass } from './toggleButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    fullWidth,\n    selected,\n    disabled,\n    size,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]\n  };\n  return composeClasses(slots, getToggleButtonUtilityClass, classes);\n};\nconst ToggleButtonRoot = styled(ButtonBase, {\n  name: 'MuiToggleButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  let selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;\n  let selectedColorChannel;\n  if (theme.vars) {\n    selectedColor = ownerState.color === 'standard' ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;\n    selectedColorChannel = ownerState.color === 'standard' ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;\n  }\n  return _extends({}, theme.typography.button, {\n    borderRadius: (theme.vars || theme).shape.borderRadius,\n    padding: 11,\n    border: `1px solid ${(theme.vars || theme).palette.divider}`,\n    color: (theme.vars || theme).palette.action.active\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [`&.${toggleButtonClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.action.disabled,\n      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    [`&.${toggleButtonClasses.selected}`]: {\n      color: selectedColor,\n      backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)\n        }\n      }\n    }\n  }, ownerState.size === 'small' && {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15)\n  });\n});\nconst ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButton'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      disableFocusRipple = false,\n      fullWidth = false,\n      onChange,\n      onClick,\n      selected,\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disabled,\n    disableFocusRipple,\n    fullWidth,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    ownerState: ownerState,\n    \"aria-pressed\": selected\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is in an active state.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the state changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the button is clicked.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes /* @typescript-to-proptypes-ignore */.any.isRequired\n} : void 0;\nexport default ToggleButton;","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n  return value === candidate;\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButtonGroup', slot);\n}\nconst toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical']);\nexport default toggleButtonGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"exclusive\", \"fullWidth\", \"onChange\", \"orientation\", \"size\", \"value\"];\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport isValueSelected from './isValueSelected';\nimport toggleButtonGroupClasses, { getToggleButtonGroupUtilityClass } from './toggleButtonGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    fullWidth,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']\n  };\n  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);\n};\nconst ToggleButtonGroupRoot = styled('div', {\n  name: 'MuiToggleButtonGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped\n    }, {\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${toggleButtonGroupClasses.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {\n    '&:not(:first-of-type)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderLeft: 0,\n      marginLeft: 0\n    }\n  } : {\n    '&:not(:first-of-type)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderTop: 0,\n      marginTop: 0\n    }\n  })\n}));\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButtonGroup'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      exclusive = false,\n      fullWidth = false,\n      onChange,\n      orientation = 'horizontal',\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disabled,\n    fullWidth,\n    orientation,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n    onChange(event, newValue);\n  };\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonGroupRoot, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: React.Children.map(children, child => {\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        return null;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        if (isFragment(child)) {\n          console.error([\"MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n        }\n      }\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.grouped, child.props.className),\n        onChange: exclusive ? handleExclusiveChange : handleChange,\n        selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n        size: child.props.size || size,\n        fullWidth,\n        color: child.props.color || color,\n        disabled: child.props.disabled || disabled\n      });\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default ToggleButtonGroup;"],"names":["PermissionDeniedPage","themeStretch","useSettingsContext","useState","role","setRole","maxWidth","heading","links","name","href","PATH_DASHBOARD","exclusive","value","onChange","event","newRole","color","sx","mb","hasContent","roles","gap","display","gridTemplateColumns","Array","map","_","index","title","subheader","p","getToggleButtonUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ToggleButtonRoot","styled","ButtonBase","overridesResolver","props","styles","ownerState","root","capitalize","size","selectedColorChannel","theme","selectedColor","palette","text","primary","main","vars","primaryChannel","mainChannel","_extends","typography","button","borderRadius","shape","padding","border","divider","action","active","fullWidth","width","toggleButtonClasses","disabled","disabledBackground","textDecoration","backgroundColor","hoverOpacity","alpha","selectedOpacity","fontSize","pxToRem","React","inProps","ref","useThemeProps","children","className","disableFocusRipple","onClick","selected","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","focusRipple","defaultPrevented","isValueSelected","candidate","undefined","isArray","indexOf","getToggleButtonGroupUtilityClass","ToggleButtonGroupRoot","toggleButtonGroupClasses","grouped","orientation","vertical","flexDirection","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","marginTop","borderTop","handleChange","buttonValue","newValue","slice","splice","concat","handleExclusiveChange","child"],"sourceRoot":""}