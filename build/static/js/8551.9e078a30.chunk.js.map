{"version":3,"file":"static/js/8551.9e078a30.chunk.js","mappings":"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","sources":["pages/Banco/BandejaBanco.js","../node_modules/dot-case/src/index.ts","../node_modules/lower-case/src/index.ts","../node_modules/no-case/src/index.ts","../node_modules/param-case/src/index.ts"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\n// import { paramCase } from 'change-case';\nimport { useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport {\n    Card,\n    Button,\n    // Divider,\n    Container,\n    IconButton,\n    TableContainer,\n    Typography,\n    MenuItem\n} from '@mui/material';\n\nimport { useTheme } from '@mui/material/styles';\nimport { useSnackbar } from 'notistack';\n// routes\nimport { paramCase } from 'change-case';\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// _mock_\n// import { _userList, _companyList } from '../../_mock/arrays';\nimport { _bancoList } from '../../_mock/arrays';\n// components\nimport Iconify from '../../components/iconify';\nimport ConfirmDialog from '../../components/confirm-dialog';\nimport CustomBreadcrumbs from '../../components/custom-breadcrumbs';\n// sections\nimport GenericDataGridCustom from '../../sections/_examples/mui/data-grid/GenericDataGridCostom';\nimport Label from '../../components/label';\nimport { CustomAvatar } from '../../components/custom-avatar';\nimport MenuPopover from '../../components/menu-popover';\nimport { HOST_API_LOCAL, END_POINT_BANDEJAEMPLEADOS } from '../../config-global';\n\n\n\n\nexport default function BandejaBanco() {\n\n    const [openConfirm, setOpenConfirm] = useState(false);\n    const [openPopover, setOpenPopover] = useState(null);\n    const [tableData, setTableData] = useState(_bancoList);\n    const [IdAUX, setIdAUX] = useState('');\n    const navigate = useNavigate();\n    const handleOpenConfirm = () => {\n        setOpenConfirm(true);\n    };\n    const handleCloseConfirm = () => {\n        setOpenConfirm(false);\n    };\n    const handleOpenPopover = (e, Id) => {\n        setIdAUX(Id)\n        setOpenPopover(e.currentTarget);\n    };\n    const handleClosePopover = () => {\n        setOpenPopover(null);\n    };\n    const handleEditRow = (id) => {\n        console.log(id)\n        navigate(PATH_DASHBOARD.banco.edit(paramCase(id)));\n    };\n    const JustAfterClicDelete = () => {\n        handleDeleteRow(IdAUX);\n        onDelete(IdAUX);\n    }\n    const handleDeleteRow = (id) => {\n        const deleteRow = tableData.filter((row) => row.id !== id);\n        setTableData(deleteRow);\n        setOpenConfirm(false);\n    };\n\n    const { enqueueSnackbar } = useSnackbar();\n    const onDelete = async (data) => {\n        try {\n            await new Promise((resolve) => setTimeout(resolve, 500));\n            enqueueSnackbar('Listo, el banco fue borrado');\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n\n\n    const columns = [\n        {\n            field: 'avatar',\n            headerName: '',\n            align: 'center',\n            headerAlign: 'center',\n            width: 64,\n            sortable: false,\n            filterable: false,\n            disableColumnMenu: true,\n            renderCell: (params) => <CustomAvatar name={params.row.name} sx={{ width: 36, height: 36 }} />,\n        },\n        {\n            field: 'name',\n            headerName: 'Banco',\n            flex: 1,\n            editable: false,\n        },\n        {\n            field: 'contactPerson',\n            headerName: 'Perosna de contacto',\n            flex: 1,\n            editable: false,\n        },\n        {\n            field: 'email',\n            headerName: 'Email',\n            flex: 1,\n            editable: false,\n            renderCell: (params) => (\n                <Typography variant=\"body2\" noWrap>\n                    {params.row.email}\n                </Typography>\n            ),\n        },\n        {\n            field: 'status',\n            type: 'singleSelect',\n            headerName: 'Estatus',\n            valueOptions: ['Activo', 'Inactivo', 'Bloqueado'],\n            align: 'center',\n            headerAlign: 'center',\n            width: 120,\n            renderCell: (params) => RenderStatus(params.row.status),\n        },\n        {\n            field: 'action',\n            headerName: 'Acciones',\n            align: 'center',\n            width: 90,\n            sortable: false,\n            filterable: false,\n            disableColumnMenu: true,\n            renderCell: (params) => (\n                <IconButton color={openPopover ? 'inherit' : 'default'} onClick={(e) => handleOpenPopover(e, params.row.id)}>\n                    <Iconify icon=\"eva:more-vertical-fill\" />\n                </IconButton>\n            ),\n        },\n    ];\n\n    return (\n        <>\n            <Helmet>\n                <title> Banco </title>\n            </Helmet>\n\n            <Container>\n\n                <CustomBreadcrumbs\n                    heading={\n                        <>Banco</>\n                    }\n                    links={[\n                        { name: '' },\n                    ]}\n                    action={\n                        <Button\n                            component={RouterLink}\n                            to={PATH_DASHBOARD.banco.new}\n                            variant=\"contained\"\n                            startIcon={<Iconify icon=\"eva:plus-fill\" />}\n                        >\n                            Registrar banco\n                        </Button>\n                    }\n                />\n\n\n\n                <Card>\n                    <TableContainer sx={{ position: 'relative', overflow: 'unset' }}>\n                        <GenericDataGridCustom EndPoint={END_POINT_BANDEJAEMPLEADOS} columns={columns} />\n                    </TableContainer>\n                </Card>\n            </Container>\n\n\n\n            <MenuPopover\n                open={openPopover}\n                onClose={handleClosePopover}\n                arrow=\"right-top\"\n                sx={{ width: 140 }}\n            >\n                <MenuItem\n                    onClick={() => {\n                        handleOpenConfirm();\n                        handleClosePopover();\n                    }}\n                    sx={{ color: 'error.main' }}\n                >\n                    <Iconify icon=\"eva:trash-2-outline\" />\n                    Borrar\n                </MenuItem>\n\n                <MenuItem\n                    onClick={() => {\n                        handleEditRow(IdAUX);\n                        handleClosePopover();\n                    }}\n                >\n                    <Iconify icon=\"eva:edit-fill\" />\n                    Editar\n                </MenuItem>\n            </MenuPopover>\n\n\n            <ConfirmDialog\n                open={openConfirm}\n                onClose={handleCloseConfirm}\n                title=\"Borrar\"\n                content=\"Deseas borrar este banco?\"\n                action={\n                    <Button variant=\"contained\" color=\"error\" onClick={JustAfterClicDelete}>\n                        Borrar\n                    </Button>\n                }\n            />\n\n        </>\n    );\n}\n\n\nfunction RenderStatus(getStatus) {\n    const theme = useTheme();\n    const isLight = theme.palette.mode === 'light';\n    return (\n        <Label\n            variant={isLight ? 'soft' : 'filled'}\n            color={(getStatus === 'Bloqueado' && 'error') || (getStatus === 'Inactivo' && 'warning') || 'success'}\n            sx={{ mx: 'auto' }}\n        >\n            {getStatus}\n        </Label>\n    );\n}\n","import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function dotCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \".\",\n    ...options,\n  });\n}\n","/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      Į: \"\\u012F\\u0307\",\n      Ì: \"\\u0069\\u0307\\u0300\",\n      Í: \"\\u0069\\u0307\\u0301\",\n      Ĩ: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n","import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function paramCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n"],"names":["BandejaBanco","useState","openConfirm","setOpenConfirm","openPopover","setOpenPopover","_bancoList","tableData","setTableData","IdAUX","setIdAUX","navigate","useNavigate","handleClosePopover","handleDeleteRow","id","deleteRow","filter","row","enqueueSnackbar","useSnackbar","onDelete","data","Promise","resolve","setTimeout","console","error","columns","field","headerName","align","headerAlign","width","sortable","filterable","disableColumnMenu","renderCell","params","name","sx","height","flex","editable","variant","noWrap","email","type","valueOptions","getStatus","isLight","useTheme","palette","mode","color","mx","RenderStatus","status","onClick","e","Id","currentTarget","handleOpenPopover","icon","heading","links","action","component","RouterLink","to","PATH_DASHBOARD","startIcon","position","overflow","EndPoint","END_POINT_BANDEJAEMPLEADOS","open","onClose","arrow","log","paramCase","title","content","dotCase","input","options","noCase","delimiter","lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","splitRegexp","_b","stripRegexp","_c","transform","_d","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sourceRoot":""}